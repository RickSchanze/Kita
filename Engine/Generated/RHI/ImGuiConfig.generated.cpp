// Auto-generated source file
#include "RHI/ImGuiConfig.h"

const Type* ImGuiColorTheme::GetStaticType() { return TypeOf<ImGuiColorTheme>(); }
const Type* ImGuiColorTheme::GetType() { return TypeOf<ImGuiColorTheme>(); }
void ImGuiColorTheme::WriteArchive(OutputArchive& Archive) const { 
Archive.WriteType("Text", Text); 
Archive.WriteType("TextDisabled", TextDisabled); 
Archive.WriteType("WindowBg", WindowBg); 
Archive.WriteType("ChildBg", ChildBg); 
Archive.WriteType("PopupBg", PopupBg); 
Archive.WriteType("Border", Border); 
Archive.WriteType("BorderShadow", BorderShadow); 
Archive.WriteType("FrameBg", FrameBg); 
Archive.WriteType("FrameBgHovered", FrameBgHovered); 
Archive.WriteType("FrameBgActive", FrameBgActive); 
Archive.WriteType("TitleBg", TitleBg); 
Archive.WriteType("TitleBgActive", TitleBgActive); 
Archive.WriteType("TitleBgCollapsed", TitleBgCollapsed); 
Archive.WriteType("MenuBarBg", MenuBarBg); 
Archive.WriteType("ScrollbarBg", ScrollbarBg); 
Archive.WriteType("ScrollbarGrab", ScrollbarGrab); 
Archive.WriteType("ScrollbarGrabHovered", ScrollbarGrabHovered); 
Archive.WriteType("ScrollbarGrabActive", ScrollbarGrabActive); 
Archive.WriteType("CheckMark", CheckMark); 
Archive.WriteType("SliderGrab", SliderGrab); 
Archive.WriteType("SliderGrabActive", SliderGrabActive); 
Archive.WriteType("Button", Button); 
Archive.WriteType("ButtonHovered", ButtonHovered); 
Archive.WriteType("ButtonActive", ButtonActive); 
Archive.WriteType("Header", Header); 
Archive.WriteType("HeaderHovered", HeaderHovered); 
Archive.WriteType("HeaderActive", HeaderActive); 
Archive.WriteType("Separator", Separator); 
Archive.WriteType("SeparatorHovered", SeparatorHovered); 
Archive.WriteType("SeparatorActive", SeparatorActive); 
Archive.WriteType("ResizeGrip", ResizeGrip); 
Archive.WriteType("ResizeGripHovered", ResizeGripHovered); 
Archive.WriteType("ResizeGripActive", ResizeGripActive); 
Archive.WriteType("Tab", Tab); 
Archive.WriteType("TabHovered", TabHovered); 
Archive.WriteType("TabActive", TabActive); 
Archive.WriteType("TabUnfocused", TabUnfocused); 
Archive.WriteType("TabUnfocusedActive", TabUnfocusedActive); 
Archive.WriteType("DockingPreview", DockingPreview); 
Archive.WriteType("DockingEmptyBg", DockingEmptyBg); 
Archive.WriteType("PlotLines", PlotLines); 
Archive.WriteType("PlotLinesHovered", PlotLinesHovered); 
Archive.WriteType("PlotHistogram", PlotHistogram); 
Archive.WriteType("PlotHistogramHovered", PlotHistogramHovered); 
Archive.WriteType("TableHeaderBg", TableHeaderBg); 
Archive.WriteType("TableBorderStrong", TableBorderStrong); 
Archive.WriteType("TableBorderLight", TableBorderLight); 
Archive.WriteType("TableRowBg", TableRowBg); 
Archive.WriteType("TableRowBgAlt", TableRowBgAlt); 
Archive.WriteType("TextSelectedBg", TextSelectedBg); 
Archive.WriteType("DragDropTarget", DragDropTarget); 
Archive.WriteType("NavHighlight", NavHighlight); 
Archive.WriteType("NavWindowingHighlight", NavWindowingHighlight); 
Archive.WriteType("NavWindowingDimBg", NavWindowingDimBg); 
Archive.WriteType("ModalWindowDimBg", ModalWindowDimBg); 
Archive.WriteType("WindowPadding", WindowPadding); 
Archive.WriteType("FramePadding", FramePadding); 
Archive.WriteType("CellPadding", CellPadding); 
Archive.WriteType("ItemSpacing", ItemSpacing); 
Archive.WriteType("ItemInnerSpacing", ItemInnerSpacing); 
Archive.WriteType("TouchExtraPadding", TouchExtraPadding); 
Archive.WriteType("IndentSpacing", IndentSpacing); 
Archive.WriteType("ScrollbarSize", ScrollbarSize); 
Archive.WriteType("GrabMinSize", GrabMinSize); 
Archive.WriteType("WindowBorderSize", WindowBorderSize); 
Archive.WriteType("ChildBorderSize", ChildBorderSize); 
Archive.WriteType("PopupBorderSize", PopupBorderSize); 
Archive.WriteType("FrameBorderSize", FrameBorderSize); 
Archive.WriteType("TabBorderSize", TabBorderSize); 
Archive.WriteType("WindowRounding", WindowRounding); 
Archive.WriteType("ChildRounding", ChildRounding); 
Archive.WriteType("FrameRounding", FrameRounding); 
Archive.WriteType("PopupRounding", PopupRounding); 
Archive.WriteType("ScrollbarRounding", ScrollbarRounding); 
Archive.WriteType("GrabRounding", GrabRounding); 
Archive.WriteType("LogSliderDeadzone", LogSliderDeadzone); 
Archive.WriteType("TabRounding", TabRounding); 
} 
void ImGuiColorTheme::ReadArchive(InputArchive& Archive) { 
Archive.ReadType("Text", Text); 
Archive.ReadType("TextDisabled", TextDisabled); 
Archive.ReadType("WindowBg", WindowBg); 
Archive.ReadType("ChildBg", ChildBg); 
Archive.ReadType("PopupBg", PopupBg); 
Archive.ReadType("Border", Border); 
Archive.ReadType("BorderShadow", BorderShadow); 
Archive.ReadType("FrameBg", FrameBg); 
Archive.ReadType("FrameBgHovered", FrameBgHovered); 
Archive.ReadType("FrameBgActive", FrameBgActive); 
Archive.ReadType("TitleBg", TitleBg); 
Archive.ReadType("TitleBgActive", TitleBgActive); 
Archive.ReadType("TitleBgCollapsed", TitleBgCollapsed); 
Archive.ReadType("MenuBarBg", MenuBarBg); 
Archive.ReadType("ScrollbarBg", ScrollbarBg); 
Archive.ReadType("ScrollbarGrab", ScrollbarGrab); 
Archive.ReadType("ScrollbarGrabHovered", ScrollbarGrabHovered); 
Archive.ReadType("ScrollbarGrabActive", ScrollbarGrabActive); 
Archive.ReadType("CheckMark", CheckMark); 
Archive.ReadType("SliderGrab", SliderGrab); 
Archive.ReadType("SliderGrabActive", SliderGrabActive); 
Archive.ReadType("Button", Button); 
Archive.ReadType("ButtonHovered", ButtonHovered); 
Archive.ReadType("ButtonActive", ButtonActive); 
Archive.ReadType("Header", Header); 
Archive.ReadType("HeaderHovered", HeaderHovered); 
Archive.ReadType("HeaderActive", HeaderActive); 
Archive.ReadType("Separator", Separator); 
Archive.ReadType("SeparatorHovered", SeparatorHovered); 
Archive.ReadType("SeparatorActive", SeparatorActive); 
Archive.ReadType("ResizeGrip", ResizeGrip); 
Archive.ReadType("ResizeGripHovered", ResizeGripHovered); 
Archive.ReadType("ResizeGripActive", ResizeGripActive); 
Archive.ReadType("Tab", Tab); 
Archive.ReadType("TabHovered", TabHovered); 
Archive.ReadType("TabActive", TabActive); 
Archive.ReadType("TabUnfocused", TabUnfocused); 
Archive.ReadType("TabUnfocusedActive", TabUnfocusedActive); 
Archive.ReadType("DockingPreview", DockingPreview); 
Archive.ReadType("DockingEmptyBg", DockingEmptyBg); 
Archive.ReadType("PlotLines", PlotLines); 
Archive.ReadType("PlotLinesHovered", PlotLinesHovered); 
Archive.ReadType("PlotHistogram", PlotHistogram); 
Archive.ReadType("PlotHistogramHovered", PlotHistogramHovered); 
Archive.ReadType("TableHeaderBg", TableHeaderBg); 
Archive.ReadType("TableBorderStrong", TableBorderStrong); 
Archive.ReadType("TableBorderLight", TableBorderLight); 
Archive.ReadType("TableRowBg", TableRowBg); 
Archive.ReadType("TableRowBgAlt", TableRowBgAlt); 
Archive.ReadType("TextSelectedBg", TextSelectedBg); 
Archive.ReadType("DragDropTarget", DragDropTarget); 
Archive.ReadType("NavHighlight", NavHighlight); 
Archive.ReadType("NavWindowingHighlight", NavWindowingHighlight); 
Archive.ReadType("NavWindowingDimBg", NavWindowingDimBg); 
Archive.ReadType("ModalWindowDimBg", ModalWindowDimBg); 
Archive.ReadType("WindowPadding", WindowPadding); 
Archive.ReadType("FramePadding", FramePadding); 
Archive.ReadType("CellPadding", CellPadding); 
Archive.ReadType("ItemSpacing", ItemSpacing); 
Archive.ReadType("ItemInnerSpacing", ItemInnerSpacing); 
Archive.ReadType("TouchExtraPadding", TouchExtraPadding); 
Archive.ReadType("IndentSpacing", IndentSpacing); 
Archive.ReadType("ScrollbarSize", ScrollbarSize); 
Archive.ReadType("GrabMinSize", GrabMinSize); 
Archive.ReadType("WindowBorderSize", WindowBorderSize); 
Archive.ReadType("ChildBorderSize", ChildBorderSize); 
Archive.ReadType("PopupBorderSize", PopupBorderSize); 
Archive.ReadType("FrameBorderSize", FrameBorderSize); 
Archive.ReadType("TabBorderSize", TabBorderSize); 
Archive.ReadType("WindowRounding", WindowRounding); 
Archive.ReadType("ChildRounding", ChildRounding); 
Archive.ReadType("FrameRounding", FrameRounding); 
Archive.ReadType("PopupRounding", PopupRounding); 
Archive.ReadType("ScrollbarRounding", ScrollbarRounding); 
Archive.ReadType("GrabRounding", GrabRounding); 
Archive.ReadType("LogSliderDeadzone", LogSliderDeadzone); 
Archive.ReadType("TabRounding", TabRounding); 
} 
const Type* ImGuiConfig::GetStaticType() { return TypeOf<ImGuiConfig>(); }
const Type* ImGuiConfig::GetType() { return TypeOf<ImGuiConfig>(); }
void ImGuiConfig::WriteArchive(OutputArchive& Archive) const { 
Super::WriteArchive(Archive); 
Archive.WriteType("FontPath", FontPath); 
Archive.WriteType("CharsetPath", CharsetPath); 
Archive.WriteType("FontSize", FontSize); 
Archive.WriteType("Theme", Theme); 
Archive.WriteType("IconFontPath", IconFontPath); 
} 
void ImGuiConfig::ReadArchive(InputArchive& Archive) { 
Super::ReadArchive(Archive); 
Archive.ReadType("FontPath", FontPath); 
Archive.ReadType("CharsetPath", CharsetPath); 
Archive.ReadType("FontSize", FontSize); 
Archive.ReadType("Theme", Theme); 
Archive.ReadType("IconFontPath", IconFontPath); 
} 
